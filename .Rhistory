adf.test(quad_season_mod$residuals)
pp.test(quad_season_mod$residuals)
kpss.test(quad_season_mod$residuals)
summary(ur.ers(quad_season_mod$residuals))
# test for normality
qqnorm(quad_season_mod$residuals, col=4)
qqline(quad_season_mod$residuals, col=2, lwd=2)
quad_season_mod = lm(log(Basketball) ~ t + I(t^2) + as.factor(t%%12), data=df)
summary(quad_season_mod)
AIC(quad_season_mod)
# fit model to logged data
tsplot(log(df$Basketball), col=4, lwd=2, main="Seasonal + Quadratic Function of Time Model in Logged Data", ylab="")
lines(quad_season_mod$fitted.values, lwd=2, col=2)
# fit model to original data
tsplot(df$Basketball, col=4, lwd=2, main="Seasonal + Quadratic Function of Time Model in Real Data", ylab="")
lines(exp(quad_season_mod$fitted.values), lwd=2, col=2)
tsplot(quad_season_mod$residuals, col=4, main="Residuals - Quadratic Trend + Seasonality Model", ylab="Resisuals")
acf(quad_season_mod$residuals)
# test for stationarity
adf.test(quad_season_mod$residuals)
pp.test(quad_season_mod$residuals)
kpss.test(quad_season_mod$residuals)
summary(ur.ers(quad_season_mod$residuals))
# test for normality
qqnorm(quad_season_mod$residuals, col=4)
qqline(quad_season_mod$residuals, col=2, lwd=2)
coeftest(sarima102_012)
auto.arima(basketballX)
require(astsa) #Library for book
library(xts)
require(dplyr)
library(forecast)
library(tseries) # need for Augmented Dickey-Fuller test
require(lmtest) # need for Durbin Watson test
require(fBasics) # need for normality tests of residuals
require(urca) # need for ERS test of stationarity
df = read.csv("basketball.csv")
str(df)
head(df)
df$t = c(1:226)
basketballX = ts(df$Basketball, frequency=12)
par(mfrow=c(2:1))
tsplot(df$Basketball, col=4, main="Basketball Interest on Google from 2004, relative to the maximum", ylab="Ratio")
tsplot(df$Basketball[0:80], col=4, main="Zoomed-in", ylab="Ratio")
summary(df$Basketball)
var(df$Basketball[1:113]) / var(df$Basketball[114:226])
var(df$Basketball[114:226]) / var(df$Basketball[1:113])
hist(df$Basketball)
plot(density(df$Basketball))
tsplot(log(df$Basketball), col=4, main="Logged Time Series", ylab="Logs")
var(log(df$Basketball)[114:226]) / var(log(df$Basketball)[1:113])
lin_mod = lm(log(Basketball) ~ t, data=df)
summary(lin_mod)
tsplot(log(df$Basketball), col=4, main="Linear Regression", ylab="")
lines(lin_mod$fitted.values, lwd=2, col=2, lty=2)
tsplot(lin_mod$residuals, col=4, main="Residuals - Linear Regression", ylab="Resisuals")
quad_mod = lm(log(Basketball) ~ t + I(t^2), data=df)
summary(quad_mod)
tsplot(log(df$Basketball), col=4, main="Quaratic Regression", ylab="")
lines(quad_mod$fitted.values, lwd=2, col=2, lty=2)
tsplot(quad_mod$residuals, col=4, main="Residuals - Quadratic Regression", ylab="Resisuals")
lin_season_mod = lm(log(Basketball) ~ t + as.factor(t%%12), data=df)
summary(lin_season_mod)
AIC(lin_season_mod)
# fit model to logged data
tsplot(log(df$Basketball), col=4, lwd=2, main="Seasonal Function of Time Model in Logged Data", ylab="")
lines(lin_season_mod$fitted.values, lwd=2, col=2)
# fit model to original data
tsplot(df$Basketball, col=4, lwd=2, main="Seasonal Function of Time Model in Real Data", ylab="")
lines(exp(lin_season_mod$fitted.values), lwd=2, col=2)
tsplot(lin_season_mod$residuals, col=4, main="Residuals - Trend + Seasonality Model", ylab="Resisuals")
acf(lin_season_mod$residuals)
# test for stationarity
adf.test(lin_season_mod$residuals)
pp.test(lin_season_mod$residuals)
kpss.test(lin_season_mod$residuals)
summary(ur.ers(lin_season_mod$residuals))
# test for normality
qqnorm(lin_season_mod$residuals, col=4)
qqline(lin_season_mod$residuals, col=2, lwd=2)
quad_season_mod = lm(log(Basketball) ~ t + I(t^2) + as.factor(t%%12), data=df)
summary(quad_season_mod)
AIC(quad_season_mod)
# fit model to logged data
tsplot(log(df$Basketball), col=4, lwd=2, main="Seasonal + Quadratic Function of Time Model in Logged Data", ylab="")
lines(quad_season_mod$fitted.values, lwd=2, col=2)
# fit model to original data
tsplot(df$Basketball, col=4, lwd=2, main="Seasonal + Quadratic Function of Time Model in Real Data", ylab="")
lines(exp(quad_season_mod$fitted.values), lwd=2, col=2)
tsplot(quad_season_mod$residuals, col=4, main="Residuals - Quadratic Trend + Seasonality Model", ylab="Resisuals")
acf(quad_season_mod$residuals)
# test for stationarity
adf.test(quad_season_mod$residuals)
pp.test(quad_season_mod$residuals)
kpss.test(quad_season_mod$residuals)
summary(ur.ers(quad_season_mod$residuals))
# test for normality
qqnorm(quad_season_mod$residuals, col=4)
qqline(quad_season_mod$residuals, col=2, lwd=2)
quad_season_mod = lm(log(Basketball) ~ I(t^2) + as.factor(t%%12), data=df)
summary(quad_season_mod)
AIC(quad_season_mod)
# fit model to logged data
tsplot(log(df$Basketball), col=4, lwd=2, main="Seasonal + Quadratic Function of Time Model in Logged Data", ylab="")
lines(quad_season_mod$fitted.values, lwd=2, col=2)
# fit model to original data
tsplot(df$Basketball, col=4, lwd=2, main="Seasonal + Quadratic Function of Time Model in Real Data", ylab="")
lines(exp(quad_season_mod$fitted.values), lwd=2, col=2)
tsplot(quad_season_mod$residuals, col=4, main="Residuals - Quadratic Trend + Seasonality Model", ylab="Resisuals")
acf(quad_season_mod$residuals)
# test for stationarity
adf.test(quad_season_mod$residuals)
pp.test(quad_season_mod$residuals)
kpss.test(quad_season_mod$residuals)
summary(ur.ers(quad_season_mod$residuals))
# test for normality
qqnorm(quad_season_mod$residuals, col=4)
qqline(quad_season_mod$residuals, col=2, lwd=2)
trend(log(df$Basketball), lowess=TRUE, col=4)
lines(lowess(log(df$Basketball)), col=2)
seasonality = log(df$Basketball) - lowess(log(df$Basketball))$y
tsplot(seasonality, col=4, main="Seasonality after Lowess Fit")
lines(lowess(seasonality), col=2)
t = c(1:226)
season_lowess_mod = lm(seasonality ~ as.factor(t%%12))
summary(season_lowess_mod)
AIC(season_lowess_mod)
tsplot(seasonality, col=4)
lines(season_lowess_mod$fitted.values, col=2, lwd=2)
tsplot(season_lowess_mod$residuals, col=4, main="Residuals - Lowess + Seasonal Means Fit")
lines(lowess(season_lowess_mod$residuals))
acf(season_lowess_mod$residuals)
logs = log(basketballX)
acf(logs)
basketballD = diff(logs, 12)
tsplot(basketballD, col=4, main="Seasonal Differencing", ylab="Differences")
adf.test(basketballD)
pp.test(basketballD)
kpss.test(basketballD)
summary(ur.ers(basketballD))
acf(basketballD)
pacf(basketballD)
sarima000_011 = sarima(basketballX, p=0, d=0, q=0, P=0, D=1, Q=1, S=12)
sarima000_011
pacf(sarima000_011$fit$residuals)
sarima000_012 = sarima(basketballX, p=0, d=0, q=0, P=0, D=1, Q=2, S=12)
sarima000_012
pacf(sarima000_012$fit$residuals)
sarima100_011 = sarima(basketballX, p=1, d=0, q=0, P=0, D=1, Q=1, S=12)
sarima100_011
acf(sarima100_011$fit$residuals, lag.max = 40)
pacf(sarima100_011$fit$residuals, lag.max = 40)
sarima101_011 = sarima(basketballX, p=1, d=0, q=1, P=0, D=1, Q=1, S=12)
sarima101_011
pacf(sarima101_011$fit$residuals, lag.max=40)
sarima200_011 = sarima(basketballX, p=2, d=0, q=0, P=0, D=1, Q=1, S=12)
sarima200_011
pacf(sarima200_011$fit$residuals, lag.max=40)
sarima201_011 = sarima(basketballX, p=2, d=0, q=1, P=0, D=1, Q=1, S=12)
sarima201_011
pacf(sarima201_011$fit$residuals, lag.max=40)
auto.arima(basketballX)
sarima102_012 = sarima(basketballX, p=1, d=0, q=2, P=0, D=1, Q=2, S=12)
sarima102_012
coeftest(sarima102_012)
coeftest(sarima102_012)
coef.test(sarima102_012)
coeftest(sarima102_012)
sarima102_012
coeftest(sarima102_012)
library(lmtest)
auto.arima(basketballX)
sarima102_012 = sarima(basketballX, p=1, d=0, q=2, P=0, D=1, Q=2, S=12)
sarima102_012
coeftest(sarima102_012)
library(lmtest)
coeftest(sarima102_012)
coeftest(sarima102_012$fit)
auto.arima(basketballX)
sarima102_012 = sarima(basketballX, p=1, d=0, q=2, P=0, D=1, Q=2, S=12)
sarima102_012
coeftest(sarima102_012$fit)
pacf(sarima102_012$fit$residuals, lag.max = 40)
Box.test(sarima102_012$fit$residuals, 6, type="Ljung")
Box.test(sarima102_012$fit$residuals, 10, type="Ljung")
Box.test(sarima102_012$fit$residuals, 11, type="Ljung")
Box.test(sarima102_012$fit$residuals, 15, type="Ljung")
coeftest(sarima102_012$fit)
sarima101_011
sarima101_011
acf(sarima101_011$fit$residuals)
adf.test(sarima101_011$fit$residuals)
pp.test(sarima101_011$fit$residuals)
kpss.test(sarima101_011$fit$residuals)
summary(ur.ers(sarima101_011$fit$residuals))
qqplot(sarima101_011$fit$residuals, col=4)
sarima101_011
acf(sarima101_011$fit$residuals)
adf.test(sarima101_011$fit$residuals)
pp.test(sarima101_011$fit$residuals)
kpss.test(sarima101_011$fit$residuals)
summary(ur.ers(sarima101_011$fit$residuals))
qqnorm(sarima101_011$fit$residuals, col=4)
qqline(sarima101_011$fit$residuals, col=2, lwd=2)
sarima101_011
acf(sarima101_011$fit$residuals)
# box-ljung test
Box.test(sarima101_011$fit$residuals, 6, "ljung")
sarima101_011
acf(sarima101_011$fit$residuals)
# box-ljung test
Box.test(sarima101_011$fit$residuals, 6, "Ljung")
Box.test(sarima101_011$fit$residuals, 10, "Ljung")
Box.test(sarima101_011$fit$residuals, 11, "Ljung")
Box.test(sarima101_011$fit$residuals, 16, "Ljung")
Box.test(sarima101_011$fit$residuals, 18, "Ljung")
# stationarity test
adf.test(sarima101_011$fit$residuals)
pp.test(sarima101_011$fit$residuals)
kpss.test(sarima101_011$fit$residuals)
summary(ur.ers(sarima101_011$fit$residuals))
# normality test
qqnorm(sarima101_011$fit$residuals, col=4)
qqline(sarima101_011$fit$residuals, col=2, lwd=2)
sarima101_011
acf(sarima101_011$fit$residuals, 50)
# box-ljung test
Box.test(sarima101_011$fit$residuals, 6, "Ljung")
Box.test(sarima101_011$fit$residuals, 10, "Ljung")
Box.test(sarima101_011$fit$residuals, 11, "Ljung")
Box.test(sarima101_011$fit$residuals, 16, "Ljung")
Box.test(sarima101_011$fit$residuals, 18, "Ljung")
# stationarity test
adf.test(sarima101_011$fit$residuals)
pp.test(sarima101_011$fit$residuals)
kpss.test(sarima101_011$fit$residuals)
summary(ur.ers(sarima101_011$fit$residuals))
# normality test
qqnorm(sarima101_011$fit$residuals, col=4)
qqline(sarima101_011$fit$residuals, col=2, lwd=2)
Box.test(sarima101_011$fit$residuals, 48, "Ljung")
sarima101_011
acf(sarima101_011$fit$residuals, 50)
# box-ljung test
Box.test(sarima101_011$fit$residuals, 6, "Ljung")
Box.test(sarima101_011$fit$residuals, 10, "Ljung")
Box.test(sarima101_011$fit$residuals, 11, "Ljung")
Box.test(sarima101_011$fit$residuals, 16, "Ljung")
Box.test(sarima101_011$fit$residuals, 18, "Ljung")
Box.test(sarima101_011$fit$residuals, 48, "Ljung")
# stationarity test
adf.test(sarima101_011$fit$residuals)
pp.test(sarima101_011$fit$residuals)
kpss.test(sarima101_011$fit$residuals)
summary(ur.ers(sarima101_011$fit$residuals))
# normality test
qqnorm(sarima101_011$fit$residuals, col=4)
qqline(sarima101_011$fit$residuals, col=2, lwd=2)
remainder_sarima_101 = sarima(remainder, 1,0,1)
remainder = quad_season_mod$residuals
remainder_sarima_100 = sarima(remainder, 1,0,0)
remainder_sarima_100
acf(remainder_sarima_100$fit$residuals, 40)
pacf(remainder_sarima_100$fit$residuals, 40)
remainder_sarima_101 = sarima(remainder, 1,0,1)
remainder_sarima_101
acf(remainder_sarima_101$fit$residuals, 40)
pacf(remainder_sarima_101$fit$residuals, 40)
Box.test(remainder_sarima_101$fit$residuals, 10, "Ljung")
Box.test(remainder_sarima_101$fit$residuals, 16, "Ljung")
remainder_sarima_200 = sarima(remainder, 2,0,0)
remainder_sarima_200
acf(remainder_sarima_200$fit$residuals, 40)
pacf(remainder_sarima_200$fit$residuals, 40)
remainder_sarima_201 = sarima(remainder, 2,0,1)
remainder_sarima_201
acf(remainder_sarima_201$fit$residuals, 40)
pacf(remainder_sarima_201$fit$residuals, 40)
Box.test(remainder_sarima_101$fit$residuals, 12, "Ljung")
# get the fitted values from function of time and sarima models
fitted_residuals = remainder - remainder_sarima_101$fit$residuals
fitted_vals = lin_season_mod$fitted.values + fitted_residuals
fitted_vals = ts(fitted_vals, frequency=12, start=1)
# plot the logged data and fiitted values
log_basketball_ts = ts(log(basketballX), frequency = 12)
tsplot(log_basketball_ts, col=4, lwd=2, main="Logged Data Fit")
lines(fitted_vals, col=2, lwd=2)
# plot the original data and fitted values
basketballX = ts(basketballX, frequency=12, start=1)
tsplot(basketballX, col=4, main="Original Data Fit")
lines(exp(fitted_vals), col=2, lwd=2)
# evaluate the residuals
residuals = log_basketball_ts - fitted_vals
tsplot(residuals, main="Residuals")
acf(residuals, 40)
Box.test(residuals, 10, "Ljung")
Box.test(residuals, 12, "Ljung")
Box.test(residuals, 16, "Ljung")
# test for stationarity
adf.test(residuals)
pp.test(residuals)
kpss.test(residuals)
summary(ur.ers(residuals))
# normality test
qqnorm(residuals, col=4)
qqline(residuals, col=2)
shapiro.test(residuals)
hist(residuals)
# calculate R-squared
cor(basketballX, exp(fitted_vals))^2
remainder_sarima_101
# calculate R-squared
cor(basketballX, exp(fitted_vals))^2
# get the fitted values from function of time and sarima models
fitted_residuals = remainder - remainder_sarima_101$fit$residuals
fitted_vals = lin_season_mod$fitted.values + fitted_residuals
fitted_vals = ts(fitted_vals, frequency=12, start=1)
# plot the logged data and fiitted values
log_basketball_ts = ts(log(basketballX), frequency = 12)
tsplot(log_basketball_ts, col=4, lwd=2, main="Logged Data Fit")
lines(fitted_vals, col=2, lwd=2)
# plot the original data and fitted values
basketballX = ts(basketballX, frequency=12, start=1)
tsplot(basketballX, col=4, main="Original Data Fit")
lines(exp(fitted_vals), col=2, lwd=2)
# evaluate the residuals
residuals = log_basketball_ts - fitted_vals
tsplot(residuals, main="Residuals")
acf(residuals, 40)
Box.test(residuals, 10, "Ljung")
Box.test(residuals, 12, "Ljung")
Box.test(residuals, 16, "Ljung")
# test for stationarity
adf.test(residuals)
pp.test(residuals)
kpss.test(residuals)
summary(ur.ers(residuals))
# normality test
qqnorm(residuals, col=4)
qqline(residuals, col=2)
shapiro.test(residuals)
hist(residuals)
# calculate R-squared
cor(basketballX, exp(fitted_vals))^2
AIC(quad_season_mod)
AIC(remainder_sarima_101)
AIC(remainder_sarima_101$fit)
train_ts = ts(basketballX[1:180],frequency = 12,start=1)   # 80% of the data
t = c(1:180)
test_ts = ts(basketballX[181:226], start=181)
# fit function of time model
lin_season_mod.val = lm(log(train_ts) ~ t + as.factor(t%%12))
lin_season_mod.val
# fit sarima model to remainders
remainder.val = lin_season_mod.val$residuals
remainder_sarima_101.val = sarima(remainder.val, p=1, d=0, q=1)
remainder_sarima_101.val
# get fitted values from both function of time and sarima models
fitted_residuals.val = remainder.val - remainder_sarima_101.val$fit$residuals
fitted_vals.val = lin_season_mod.val$fitted.values + fitted_residuals.val
fitted_vals.val = ts(fitted_vals.val, frequency=12)
# plot the logged fit
log_basketball_ts.val = ts(log(train_ts), frequency = 12)
tsplot(log_basketball_ts.val, col=4, lwd=2, main="Logged Data Fit")
lines(fitted_vals.val, col=2, lwd=2)
# plot the original data fit
tsplot(train_ts, col=4, main="Original Data Fit")
lines(exp(fitted_vals.val), col=2, lwd=2)
# residuals
residuals.val = log_basketball_ts.val - fitted_vals.val
tsplot(residuals.val, main="Residuals")
acf(residuals.val, 40)
qqnorm(residuals.val, col=4)
qqline(residuals.val, col=2)
hist(residuals.val)
# calculate R-squared
cor(train_ts, exp(fitted_vals.val))^2
# predict from function of time model
newdata.val = data.frame(t=c(181:226))
seasonal_preds.val = predict(lin_season_mod.val, newdata.val)
# predict from sarima model
remainder_preds.val = sarima.for(remainder.val, 46, 1, 0, 1)$pred
preds.val = seasonal_preds.val + remainder_preds.val
tsplot(log(test_ts), col=4, main="Predict Logged Data")
lines(preds.val, col=2, lwd=2)
tsplot(test_ts, col=4, main="Predict Real Data")
lines(exp(preds.val), col=2, lwd=2)
# calculate R-squared
cor(test_ts, exp(preds.val))^2
# predict from function of time model
newdata = data.frame(t=c(227:250))
seasonal_preds = predict(lin_season_mod, newdata)
# predict from sarima model
remainder_preds = sarima.for(remainder, 24, 1, 0, 1)$pred
preds = seasonal_preds + remainder_preds
# align data
preds = ts(preds, start=226)
basketballX = ts(basketballX, start=1)
preds
tsplot(log(basketballX), col=4, xlim=c(1,250), main="Point Forecast - Logged Data")
lines(preds, col=2)
tsplot(basketballX, col=4, xlim=c(1,250), main="Point Forecast - Real Data")
lines(exp(preds), col=2)
# predict interval from function of time model
newdata = data.frame(t=c(227:250))
seasonal_preds = predict(lin_season_mod, newdata, interval="predict")
# predict interval from sarima model
sarima_preds = sarima.for(remainder, 24, 1, 0, 1)
remainder_preds = sarima_preds$pred
remainder_se = sarima_preds$se
upr = remainder_preds + 1.96 * remainder_se
lwr = remainder_preds - 1.96 * remainder_se
# predict interval
preds = seasonal_preds[1:24] + remainder_preds
upr_preds = seasonal_preds[49:72] + upr
lwr_preds = seasonal_preds[25:48] + lwr
# align data
preds = ts(preds, start=226)
upr_preds = ts(upr_preds, start=226)
lwr_preds = ts(lwr_preds, start=226)
basketballX = ts(basketballX, start=1)
# plot future forecast interval
par(mfrow=c(2,1))
tsplot(log(basketballX), col=4, xlim=c(1,250), ylim=c(2.7,5), main="Forecast Interval - Logged Data")
lines(preds, col=2)
lines(upr_preds)
lines(lwr_preds)
tsplot(log(basketballX), col=4, xlim=c(180,250), ylim=c(2.7,5))
lines(preds, col=2)
lines(upr_preds)
lines(lwr_preds)
# relative to real data
tsplot(basketballX, col=4, xlim=c(1,250), ylim=c(17, 152), main="Forecast Interval - Real Data")
lines(exp(preds), col=2)
lines(exp(upr_preds))
lines(exp(lwr_preds))
tsplot(basketballX, col=4, xlim=c(180,250), ylim=c(17, 152))
lines(exp(preds), col=2)
lines(exp(upr_preds))
lines(exp(lwr_preds))
knitr::opts_chunk$set(echo = TRUE)
P3 <- P2 %>% mutate(res = resid(reg2),fit = fitted.values(reg2))
P <- read.csv("Prestige.csv")
str(P)
summary(P)
P1 <- P %>% select(education:prestige)
setwd("~/Desktop/fall22/MATH220")
library(dplyr)
library(ggplot2)
library(car)
P <- read.csv("Prestige.csv")
str(P)
summary(P)
P1 <- P %>% select(education:prestige)
P1 %>% ggplot(aes(prestige))+
geom_histogram()
P1 %>% ggplot(aes(prestige))+
geom_boxplot()
P1 %>% ggplot(aes(income))+
geom_histogram()
P1 %>% ggplot(aes(education))+
geom_histogram()
P1 %>% ggplot(aes(women))+
geom_histogram()
plot(P1)
cor(P1)
P2 <- P %>% select(education:prestige) %>%
mutate(income=log(income))
null <- lm(prestige~1,P2)
full <- lm(prestige~.,P2)
step(null, scope=list(lower=null, upper=full),direction="forward")
reg <- lm(prestige ~ education + income + women, P2)
summary(reg)
reg2 <- lm(prestige ~ education + income, P2)
summary(reg2)
reg3 <- lm(prestige ~ education + income + women:income, P2)
summary(reg3)
P3 <- P2 %>% mutate(res = resid(reg2),fit = fitted.values(reg2))
hist(reg2$residuals)
mean(reg2$residuals)
shapiro.test(reg2$residuals)
ncvTest(reg2)
P3 %>% ggplot(aes(fit,res)) +
geom_point() +
geom_smooth(method=lm)
P3 %>% ggplot(aes(education,res)) +
geom_point() +
geom_smooth(method=lm)
P3 %>% ggplot(aes(income,res)) +
geom_point() +
geom_smooth(method=lm)
View(P3)
View(P)
car <- read.csv("MTCars.csv")
str(car)
summary(car)
car %>% ggplot(aes(mpg)) +
geom_histogram()
car %>% ggplot(aes(mpg)) +
geom_boxplot()
car %>% ggplot(aes(log(mpg))) +
geom_histogram()
car %>% ggplot(aes(log(mpg))) +
geom_boxplot()
car2 <- car %>% select(mpg:carb)
cor(car2)[1:11]
null <- lm(log(mpg)~1, car2)
full <- lm(log(mpg)~., car2)
step(null, scope=list(lower=null, upper=full), direction="forward")
reg = lm(log(mpg) ~ wt + cyl + hp, data = car2)
summary(reg)
setwd("~/Desktop/fall22/MATH422/classwork/spec.boots")
